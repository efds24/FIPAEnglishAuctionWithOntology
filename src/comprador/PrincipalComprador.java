package comprador;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import javax.swing.table.DefaultTableModel;

/*
 * Interfaz gráfica de los agentes compradores
 * agente: Agente Comprador del que es interfaz
 * libros: Lista 
*/
public class PrincipalComprador extends javax.swing.JFrame {

    private AgenteComprador agente;
    private HashMap<String, Double> libros;

    public PrincipalComprador(AgenteComprador agente) {
        initComponents();
        this.agente = agente;
        setTitle(agente.getAID().getLocalName());
        libros = new HashMap<>();
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                agente.doDelete();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        precioMaximo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        nombreLibro = new javax.swing.JTextField();
        addLibroBoton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaLibros = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaSubastasActivas = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaSubastasGanadas = new javax.swing.JTable();

        precioMaximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precioMaximoActionPerformed(evt);
            }
        });

        jLabel1.setText("Precio máximo");

        nombreLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreLibroActionPerformed(evt);
            }
        });

        addLibroBoton.setText("Añadir libro");
        addLibroBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLibroBotonActionPerformed(evt);
            }
        });

        tablaLibros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Precio maximo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaLibros);

        jLabel2.setText("Nombre del libro");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nombreLibro, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(precioMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(addLibroBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreLibro, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(precioMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addLibroBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Nueva subasta", jPanel1);

        tablaSubastasActivas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subasta", "Precio actual", "Eres el comprador actual"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tablaSubastasActivas);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Subastas activas", jPanel2);

        tablaSubastasGanadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subasta", "Precio final"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tablaSubastasGanadas);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Subastas vencidas", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void precioMaximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioMaximoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_precioMaximoActionPerformed

    private void nombreLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreLibroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreLibroActionPerformed

    private void addLibroBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLibroBotonActionPerformed
        if (!nombreLibro.getText().isEmpty() && !precioMaximo.getText().isEmpty()) {
            if(!libros.containsKey(nombreLibro)){
                addFilaTablaLibros(nombreLibro.getText(), precioMaximo.getText());
                libros.put(nombreLibro.getText(), Double.parseDouble(precioMaximo.getText()));
            } else {
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        javax.swing.JOptionPane.showMessageDialog(null, "Ya has añadido este libro, eliminalo si quieres cambiar el precio máximo", agente.getLocalName(), javax.swing.JOptionPane.ERROR);
                    }
                });
            }
            nombreLibro.setText("");
            precioMaximo.setText("");
        } else {
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    javax.swing.JOptionPane.showMessageDialog(null, "Faltan datos", "Añadir libro, "+agente.getLocalName(), javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            });
        }
    }//GEN-LAST:event_addLibroBotonActionPerformed

    private void addFilaTablaLibros(String nombreLibro, String precioMaximo) {
        Object[] fila = new Object[2];

        fila[0] = (Object) nombreLibro;
        fila[1] = (Object) precioMaximo;

        DefaultTableModel modelo = (DefaultTableModel) tablaLibros.getModel();
        modelo.addRow(fila);

        tablaLibros.setModel(modelo);
    }

    public HashMap<String, Double> getLibros() {
        return libros;
    }
    
    public void addFilaSubastasGanadas(String libro, String precio){
        Object[] fila = new Object[2];

        fila[0] = (Object) libro;
        fila[1] = (Object) precio;

        DefaultTableModel modelo = (DefaultTableModel) tablaSubastasGanadas.getModel();
        modelo.addRow(fila);

        tablaSubastasGanadas.setModel(modelo);
    }
    
    public void rmLibro(String libro){
        libros.remove(libro);
        DefaultTableModel modelo = (DefaultTableModel) tablaLibros.getModel();
        for(int i = 0; i<modelo.getRowCount();i++){
            if(modelo.getValueAt(i, 0).equals((Object) libro)){
                modelo.removeRow(i);
                break;
            }
        }
        
    }
    
    public void addFilaSubastasActivas(String libro, String precio, Boolean comprador) {
        int row = -1;
        
        DefaultTableModel modelo = (DefaultTableModel) tablaSubastasActivas.getModel();
        
        for(int i = 0; i<modelo.getRowCount();i++){
            if(modelo.getValueAt(i, 0).equals((Object) libro)){
                row = i;
                break;
            }
        }
        
        if(row == -1){
            Object[] fila = new Object[3];

            fila[0] = (Object) libro;
            fila[1] = (Object) precio;
            if(comprador)
                fila[2] = (Object) "Sí";
            else
                fila[2] = (Object) "No";



            modelo.addRow(fila);

            tablaSubastasActivas.setModel(modelo);
        } else {
            modelo.setValueAt(precio, row, 1);
            if(comprador)
                modelo.setValueAt("Sí", row, 2);
            else
                modelo.setValueAt("No", row, 2);
            
            tablaSubastasActivas.setModel(modelo);
            
        }
   
    }
    
    public void rmFilaSubastasActivas(String libro) {
        DefaultTableModel tm = (DefaultTableModel) tablaSubastasActivas.getModel();
        int row = -1;
        for (int i = 0; i < tm.getRowCount(); i++) {
            if (tm.getValueAt(i, 0).equals((Object) libro)) {
                row = i;
                break;
            }
        }
        if(row != -1){
            tm.removeRow(row);
            tablaSubastasActivas.setModel(tm);
        }       
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLibroBoton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField nombreLibro;
    private javax.swing.JTextField precioMaximo;
    private javax.swing.JTable tablaLibros;
    private javax.swing.JTable tablaSubastasActivas;
    private javax.swing.JTable tablaSubastasGanadas;
    // End of variables declaration//GEN-END:variables




}
